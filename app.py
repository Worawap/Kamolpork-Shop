import streamlit as st
import pandas as pd
import datetime

st.set_page_config(page_title="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô", layout="centered")

st.markdown("""
    <h1 style='text-align: center; color: #FF4B4B;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô - ‡∏Ç‡∏≤‡∏¢‡∏´‡∏°‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô</h1>
    <hr style='border:1px solid #FF4B4B;'>
""", unsafe_allow_html=True)

cash_types = [
    ("1,000 ‡∏ö‡∏≤‡∏ó", 1000),
    ("500 ‡∏ö‡∏≤‡∏ó", 500),
    ("100 ‡∏ö‡∏≤‡∏ó", 100),
    ("50 ‡∏ö‡∏≤‡∏ó", 50),
    ("20 ‡∏ö‡∏≤‡∏ó", 20),
    ("10 ‡∏ö‡∏≤‡∏ó (‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)", 10),
    ("5 ‡∏ö‡∏≤‡∏ó (‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)", 5),
    ("2 ‡∏ö‡∏≤‡∏ó (‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)", 2),
    ("1 ‡∏ö‡∏≤‡∏ó (‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)", 1)
]

if "next_page" not in st.session_state:
    st.session_state["next_page"] = False

if not st.session_state["next_page"]:
    st.markdown("<h3 style='color: #4CAF50;'>üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ö‡∏á‡∏Ñ‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç</h3>", unsafe_allow_html=True)

    cash_df = pd.DataFrame({
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": [label for label, _ in cash_types],
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": [0 for _ in cash_types]
    })

    edited_cash_df = st.data_editor(
        cash_df,
        use_container_width=True,
        hide_index=True,
        num_rows="fixed"
    )

    col1, col2, col3 = st.columns(3)
    with col1:
        pos_cash = st.number_input("üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö (‡∏à‡∏≤‡∏Å POS)", min_value=0, step=1)
    with col2:
        pos_transfer = st.number_input("üè¶ ‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏≠‡∏ô (‡∏à‡∏≤‡∏Å POS)", min_value=0, step=1)
    with col3:
        cash_in_drawer = st.number_input("üíº ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", min_value=0, step=1)

    st.markdown("<h4 style='color: #4CAF50;'>üì¶ ‡∏ö‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢</h4>", unsafe_allow_html=True)
    waste_bills = [st.number_input(f"‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢ {i+1}", min_value=0, step=1, key=f"waste_{i}") for i in range(5)]

    st.markdown("<h4 style='color: #4CAF50;'>üßæ ‡∏ö‡∏¥‡∏•‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</h4>", unsafe_allow_html=True)
    cancel_bills = [st.number_input(f"‡∏ö‡∏¥‡∏•‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å {i+1}", min_value=0, step=1, key=f"cancel_{i}") for i in range(5)]

    if st.button("‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô"):
        counts = dict(zip([value for _, value in cash_types], edited_cash_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]))
        total_amount = sum([value * count for value, count in counts.items()])

        st.session_state.update({
            "counts": counts,
            "total_amount": total_amount,
            "pos_cash": pos_cash,
            "pos_transfer": pos_transfer,
            "cash_in_drawer": cash_in_drawer,
            "waste_bills": waste_bills,
            "cancel_bills": cancel_bills,
            "next_page": True
        })
else:
    st.markdown("<h3 style='color: #4CAF50;'>üí∞ ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å</h3>", unsafe_allow_html=True)

    change_df = pd.DataFrame({
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": [label for label, _ in cash_types],
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠": [0 for _ in cash_types]
    })

    edited_change_df = st.data_editor(
        change_df,
        use_container_width=True,
        hide_index=True,
        num_rows="fixed"
    )

    if st.button("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô"):
        change_counts = dict(zip([value for _, value in cash_types], edited_change_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]))
        total_change = sum([value * count for value, count in change_counts.items()])

        if total_change > 4000:
            st.error("‚ùå ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 4,000 ‡∏ö‡∏≤‡∏ó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà!")
            st.stop()

        send_back = {}
        for value in st.session_state["counts"]:
            qty_after_change = st.session_state["counts"][value] - change_counts.get(value, 0)
            if qty_after_change > 0:
                send_back[value] = qty_after_change

        send_back_df = pd.DataFrame([
            {"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": f"{value} ‡∏ö‡∏≤‡∏ó", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö": count}
            for value, count in send_back.items()
        ])

        st.success("‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

        st.markdown("<h3 style='color: #795548;'>üìã ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó</h3>", unsafe_allow_html=True)
        st.dataframe(send_back_df, use_container_width=True)

        total_sale = st.session_state.get("pos_cash", 0) + st.session_state.get("pos_transfer", 0)
        total_real = st.session_state.get("total_amount", 0)
        total_waste = sum(st.session_state.get("waste_bills", []))
        total_cancel = sum(st.session_state.get("cancel_bills", []))

        difference = (st.session_state.get("cash_in_drawer", 0) - st.session_state.get("pos_cash", 0)) + total_waste + total_cancel

        st.markdown("<h3 style='color: #E91E63;'>üì¢ ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</h3>", unsafe_allow_html=True)
        summary_df = pd.DataFrame({
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": ["‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö POS", "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏ô‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏á", "‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≤‡∏î/‡πÄ‡∏Å‡∏¥‡∏ô"],
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)": [total_sale, total_real, difference]
        })
        st.dataframe(summary_df, use_container_width=True)
